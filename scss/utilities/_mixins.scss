/* ================================= 
  Mixins
==================================== */

// Flexbox

@mixin flexbox($display: flex, $direction: null, $wrap: null, $justify: null) {
  display: $display;
  flex-direction: $direction;
  flex-wrap: $wrap;
  justify-content: $justify;
  @content;
}

// Buttons Background Color

@mixin bt-colors($map) {
  @each $theme, $color in $map {
    @include m($theme) {
      background-color: $color;
    }
  }
}

//Media Queries

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint--mobile) and (max-width: $brkpoint--tablet) {
      @content;
    }
  } @else if $break == "medium" {
    @media (min-width: $brkpoint--tablet) {
      @content;
    }
  } @else if $break == "large" {
    @media (min-width: $brkpoint--desktop) {
      @content;
    }
  }
}

// Grid Mixins

@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}

// Grid columns background colors
@mixin grid-colors($map) {
  $i: 1;
  @each $color in $map {
    @include e("col--#{$i}") {
      background-color: $color;
      color: $grey;
      text-align: left;
      @include mq(medium) {
        text-align: center;
      }
    }
    $i: $i + 1;
  }
}

@mixin doubly($margin: 1em) {
  & + & {
    margin-left: $margin;
    @content;
  }
}

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}
